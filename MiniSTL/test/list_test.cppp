#ifndef TEST_H
#define TEST_H

#include "../src/list.h"
#include <gtest/gtest.h>

TEST(ListTest, ConstructorTest){
    //默认构造函数
    mylist<int> l1;
    EXPECT_EQ(*l1.begin(),0);
    //初始化容器大小为n，值为默认值
    mylist<int> l2(5);
    auto it=l2.begin();
    for(int i=0;i<5;++i)
        ++it;
    EXPECT_EQ(*l2.begin(),0);
    EXPECT_EQ(it,l2.end());
    // //初始化容器大小为n，值为val
    mylist<int> l3(size_t(5),2);
    it=l3.begin();
    for(int i=0;i<5;++i)
        ++it;
    EXPECT_EQ(*l3.begin(),2);
    EXPECT_EQ(it,l3.end());
    // //range构造函数
    int arr[5]={1,2,3,4,5};
    mylist<int> l4(arr,arr+5);
    it=l4.begin();
    for(int i=0;i<4;++i)
        ++it;
    EXPECT_EQ(*l4.begin(),1);
    EXPECT_EQ(*it,5);++it;
    EXPECT_EQ(it,l4.end());
    // //拷贝构造
    mylist<int> l5(l4);
    it=l5.begin();
    for(int i=0;i<4;++i)
        ++it;
    EXPECT_EQ(*l5.begin(),1);
    EXPECT_EQ(*it,5); ++it;
    EXPECT_EQ(it,l5.end());
    // //移动构造
    mylist<int> l6(mystl::move(l4));
    it=l6.begin();
    for(int i=0;i<4;++i)
        ++it;
    EXPECT_EQ(*l6.begin(),1);
    EXPECT_EQ(*it,5);++it;
    EXPECT_EQ(it,l6.end());
    EXPECT_EQ(l4.end().node,nullptr);
    // //initializer_list构造
    mylist<int> l7{1,2,3,4,5};
    it=l7.begin();
    for(int i=0;i<4;++i)
        ++it;
    EXPECT_EQ(*l7.begin(),1);
    EXPECT_EQ(*it,5);++it;
    EXPECT_EQ(it,l7.end());
}
TEST(ListTest, AssignmentTest){
    mylist<int> l7{1,2,3,4,5};
    mylist<int> tem{10,11};
    mylist<int> tem2{21,22};
    //拷贝赋值
    l7=tem;
    auto it=l7.begin();
    EXPECT_EQ(*it,10);++it;
    EXPECT_EQ(*it,11);++it;
    EXPECT_EQ(it,l7.end());
    // //移动赋值
    l7=mystl::move(tem2);
    it=l7.begin();
    EXPECT_EQ(tem2.end().node,nullptr);
    EXPECT_EQ(*it,21);++it;
    EXPECT_EQ(*it,22);++it;
    EXPECT_EQ(it,l7.end());
}
TEST(ListTest, BeginEndTest){
    mylist<int> l7{1,2,3,4,5};
    EXPECT_EQ(*l7.begin(),1);
    auto it=l7.end();
    EXPECT_EQ(--l7.begin(),it);
    --it;
    EXPECT_EQ(*it,5);
}
TEST(ListTest, EmptyTest){
    mylist<int> emp;
    mylist<int> l7{1,2,3,4,5};
    EXPECT_TRUE(emp.empty());
    EXPECT_FALSE(l7.empty());
}
TEST(ListTest, SizeTest){
    mylist<int> emp;
    mylist<int> l7{1,2,3,4,5};
    EXPECT_EQ(emp.size(),0);
    EXPECT_EQ(l7.size(),5);
}
TEST(ListTest, FrontBackTest){
    mylist<int> l7{1,2,3,4,5};
    EXPECT_EQ(l7.front(),1);
    EXPECT_EQ(l7.back(),5);
}
TEST(ListTest, AssignTest){
    mylist<int> l7{1,2,3,4,5};
    int arr[7]={7,6,5,4,3,2,1};
    l7.assign(arr,arr+7);
    EXPECT_EQ(l7.size(),7);
    EXPECT_EQ(l7.front(),7);
    EXPECT_EQ(l7.back(),1);
}
TEST(ListTest, EmplaceFrontBackTest){
    mylist<int> l7{1,2,3,4,5};
    auto it=l7.begin();++it;
    //emplace
    l7.emplace(it,30);
    EXPECT_EQ(*(++(l7.begin())),30);
    //emplace_front
    l7.emplace_front(10);
    EXPECT_EQ(l7.front(),10);
    //emplace_back
    l7.emplace_back(20);
    EXPECT_EQ(l7.back(),20);
}
TEST(ListTest, PushFrontBackTest){
    mylist<int> l7{1,2,3,4,5};
    l7.push_front(10);
    EXPECT_EQ(l7.front(),10);
    l7.push_back(20);
    EXPECT_EQ(l7.back(),20);
}
TEST(ListTest, PopFrontBackTest){
    mylist<int> l7{1,2,3,4,5};
    l7.pop_front();
    EXPECT_EQ(l7.front(),2);
    l7.pop_back();
    EXPECT_EQ(l7.back(),4);
}
TEST(ListTest, InsertTest){
    mylist<int> l7{1,2,3,4,5};
    auto it=l7.begin();
    //在指定位置插入一个新元素
    l7.insert(it,10);
    it=l7.begin();
    EXPECT_EQ(*it,10);
    //在指定位置插入n个值为val的节点
    it=l7.begin();
    l7.insert(it,size_t(2),20);
    it=l7.begin();
    EXPECT_EQ(*it,20);
    ++it;++it;
    EXPECT_EQ(*it,10);
    //在指定位置插入range中的元素
    int arr[3]={30,30,30};
    it=l7.begin();
    l7.insert(it,arr,arr+3);
    it=l7.begin();
    EXPECT_EQ(*it,30);
    ++it;++it;++it;
    EXPECT_EQ(*it,20);
    //支持 initializer list插入
    it=l7.begin();
    l7.insert(it,{40,40});
    it=l7.begin();
    EXPECT_EQ(*it,40);
    ++it;++it;
    EXPECT_EQ(*it,30);
}
TEST(ListTest, EraseTest){
    mylist<int> l7{1,2,3,4,5};
    auto it=l7.begin();
    //删除pos处的元素
    l7.erase(it);
    it=l7.begin();
    EXPECT_EQ(*it,2);
    //删除range中的元素
    it=l7.begin();++it;
    auto it2=l7.end();
    l7.erase(it,it2);
    it=l7.begin();
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(it,l7.end());
}
TEST(ListTest, ClearTest){
    mylist<int> l7{1,2,3,4,5};
    l7.clear();
    EXPECT_EQ(l7.begin(),l7.end());
}
TEST(ListTest, SwapTest){
    mylist<int> oth{10,11};
    mylist<int> l7{1,2,3,4,5};
    l7.swap(oth);
    EXPECT_EQ(l7.front(),10);
    EXPECT_EQ(oth.front(),1);
}
TEST(ListTest, ResizeTest){
    mylist<int> l7{1,2,3,4,5};
    //减少size
    l7.resize(3,1);
    auto it=l7.begin();
    EXPECT_EQ(*it,1);++it;++it;
    EXPECT_EQ(*it,3);++it;
    EXPECT_EQ(it,l7.end());
    //增大size
    l7.resize(4,5);
    it=l7.begin();
    EXPECT_EQ(*it,1);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,3);++it;
    EXPECT_EQ(*it,5);++it;
    EXPECT_EQ(it,l7.end());
}
TEST(ListTest, SpliceTest){
    mylist<int> oth{10,11};
    mylist<int> l7{1,2,3,4,5};
    auto it=l7.begin();
    //把整个other list移动到pos处
    l7.splice(it,oth);
    it=l7.begin();
    EXPECT_EQ(*it,10);++it;
    EXPECT_EQ(*it,11);++it;
    EXPECT_EQ(*it,1);++it;
    //把迭代器i所指的节点移动到pos处
    it=l7.begin();
    auto it2=oth.begin();
    oth.splice(it2,l7,it);
    it2=oth.begin(); it=l7.begin();
    EXPECT_EQ(*it2,10);
    EXPECT_EQ(*it,11);
    //把迭代器first～last范围中的节点移动到pos处
    it=l7.begin(); it2=oth.begin();
    auto itl=l7.end();
    oth.splice(it2,l7,it,itl);
    it2=oth.begin();
    EXPECT_EQ(*it2,11);
    EXPECT_EQ(l7.begin(),l7.end());
}
TEST(ListTest, RemoveTest){
    mylist<int> l7{1,2,3,4,5};
    l7.remove(1);
    auto it=l7.begin();
    EXPECT_EQ(*it,2);
    l7.remove_if( [](int x) ->bool {return x>3;});
    it=l7.begin();
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,3);++it;
    EXPECT_EQ(it,l7.end());
}
TEST(ListTest, UniqueTest){
    mylist<int> l7{1,1,2,2};
    l7.unique();
    auto it=l7.begin();
    EXPECT_EQ(*it,1);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(it,l7.end());
}
TEST(ListTest, MergeTest){
    mylist<int> l7{2,5,7};
    mylist<int> l8{1,4,6,8,10};
    l7.merge(l8);
    auto it=l7.begin();
    EXPECT_EQ(l8.begin(),l8.end());
    EXPECT_EQ(*it,1);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,4);++it;
    EXPECT_EQ(*it,5);++it;
    EXPECT_EQ(*it,6);++it;
    EXPECT_EQ(*it,7);++it;
    EXPECT_EQ(*it,8);++it;
    EXPECT_EQ(*it,10);++it;
    EXPECT_EQ(it,l7.end());
}
TEST(ListTest, SortTest){
    mylist<int> l7{6,5,8,4,5,7};
    l7.sort();
    auto it=l7.begin();
    EXPECT_EQ(*it,4);++it;
    EXPECT_EQ(*it,5);++it;
    EXPECT_EQ(*it,5);++it;
    EXPECT_EQ(*it,6);++it;
    EXPECT_EQ(*it,7);++it;
    EXPECT_EQ(*it,8);
    mylist<int> l8{1,5,4,2,3,5};
    l8.sort([](int x, int y)->bool { return !(x<y); });
    auto it2=l8.begin();
    EXPECT_EQ(*it2,5);++it2;
    EXPECT_EQ(*it2,5);++it2;
    EXPECT_EQ(*it2,4);++it2;
    EXPECT_EQ(*it2,3);++it2;
    EXPECT_EQ(*it2,2);++it2;
    EXPECT_EQ(*it2,1);
}
TEST(ListTest, ReverseTest){
    mylist<int> l{1,2,3,4,5};
    l.reverse();
    auto it=l.begin();
    EXPECT_EQ(*it, 5);++it;
    EXPECT_EQ(*it, 4);++it;
    EXPECT_EQ(*it, 3);++it;
    EXPECT_EQ(*it, 2);++it;
    EXPECT_EQ(*it, 1);++it;
    EXPECT_EQ(it, l.end());
}

#endif
