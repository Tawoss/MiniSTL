#ifndef TEST_H
#define TEST_H

#include "../src/multiset.h"
#include <gtest/gtest.h>

TEST(MultiSetTest, ConstructorTest){
    //默认构造函数
    my_multiset<int> l1;
    EXPECT_EQ(l1.size(),0);
    //range构造函数
    int arr[5]={1,2,2,4,4};
    my_multiset<int> l4(arr,arr+5);
    auto it=l4.begin();
    EXPECT_EQ(*it,1);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,4);++it;
    EXPECT_EQ(*it,4);++it;
    EXPECT_EQ(it,l4.end());
    //拷贝构造
    my_multiset<int> l5(l4);
    it=l5.begin();
    EXPECT_EQ(*it,1);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,4);++it;
    EXPECT_EQ(*it,4);++it;
    EXPECT_EQ(it,l5.end());
    //移动构造
    my_multiset<int> l6(mystl::move(l4));
    it=l6.begin();
    EXPECT_EQ(*it,1);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,4);++it;
    EXPECT_EQ(*it,4);++it;
    EXPECT_EQ(it,l6.end());
    EXPECT_EQ(l4.size(),0);
    //initializer_list构造
    my_multiset<int> l7{1,2,2,4,5};
    it=l7.begin();
    EXPECT_EQ(*it,1);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,4);++it;
    EXPECT_EQ(*it,5);++it;
    EXPECT_EQ(it,l7.end());
}
TEST(MultiSetTest, AssignmentTest){
    my_multiset<int> l7{1,2,2,4,5};
    my_multiset<int> tem{10,10,11};
    my_multiset<int> tem2{21,22,22};
    //拷贝赋值
    l7=tem;
    auto it=l7.begin();
    EXPECT_EQ(*it,10);++it;
    EXPECT_EQ(*it,10);++it;
    EXPECT_EQ(*it,11);++it;
    EXPECT_EQ(it,l7.end());
    //移动赋值
    l7=mystl::move(tem2);
    it=l7.begin();
    EXPECT_EQ(tem2.end().node,nullptr);
    EXPECT_EQ(*it,21);++it;
    EXPECT_EQ(*it,22);++it;
    EXPECT_EQ(*it,22);++it;
    EXPECT_EQ(it,l7.end());
}
TEST(MultiSetTest, BeginEndTest){
    my_multiset<int> l7{1,2,2,4,5};
    EXPECT_EQ(*l7.begin(),1);
    auto it=l7.end();--it;
    EXPECT_EQ(*it,5);
}
TEST(MultiSetTest, EmptyTest){
    my_multiset<int> emp;
    my_multiset<int> l7{1,2,2,4,5};
    EXPECT_TRUE(emp.empty());
    EXPECT_FALSE(l7.empty());
}
TEST(MultiSetTest, SizeTest){
    my_multiset<int> emp;
    my_multiset<int> l7{1,2,2,4,5};
    EXPECT_EQ(emp.size(),0);
    EXPECT_EQ(l7.size(),5);
}
TEST(MultiSetTest, FindTest){
    my_multiset<int> l7{1,3,5,5};
    auto it=l7.find(1);
    EXPECT_EQ(*it,1);
    it=l7.find(5);
    EXPECT_EQ(*it,5);
    it=l7.find(10);
    EXPECT_EQ(it,l7.end());
}
TEST(MultiSetTest, LowerUpperBoundTest){
    my_multiset<int> l7{1,3,5,9};
    auto it=l7.lower_bound(3);
    EXPECT_EQ(*it,3);
    it=l7.lower_bound(4);
    EXPECT_EQ(*it,5);
    it=l7.lower_bound(10);
    EXPECT_EQ(it,l7.end());

    it=l7.upper_bound(1);
    EXPECT_EQ(*it,3);
    it=l7.upper_bound(2);
    EXPECT_EQ(*it,3);
    it=l7.upper_bound(9);
    EXPECT_EQ(it,l7.end());
}
TEST(MultiSetTest, EqualRangeTest){
    my_multiset<int> l7{1,3,3,3,5,9};
    auto p=l7.equal_range(3);
    auto it=l7.begin();++it;
    auto it2=it;++it2;++it2;++it2;
    EXPECT_EQ(p.first,it);
    EXPECT_EQ(p.second,it2);

    p=l7.equal_range(9);
    //std::cout<<*(p.first)<<" : "<<*(p.second)<<std::endl;
    EXPECT_EQ(p.first,--l7.end());
    EXPECT_EQ(p.second,l7.end());
}
TEST(MultiSetTest, InsertTest){
    my_multiset<int> l7{1,3,5,9};
    //插入值为val的节点
    l7.insert(3);
    auto it=l7.find(3);
    EXPECT_EQ(*it,3);
    //给定插入位置在pos附近
    it=l7.begin();
    l7.insert(it,2);
    it=l7.find(2);
    EXPECT_EQ(*it,2);
    //给定range插入
    int arr[5]={1,8,9,10,11};
    l7.insert(arr,arr+5);
    it=l7.find(8);
    EXPECT_EQ(*it,8);
    it=l7.find(10);
    EXPECT_EQ(*it,10);
    it=l7.find(11);
    EXPECT_EQ(*it,11);
    //initializer_list插入
    l7.insert({6,6,7,7});
    it=l7.find(6);
    EXPECT_EQ(*it,6);++it;
    EXPECT_EQ(*it,*l7.find(7));
}
TEST(MultiSetTest, EraseTest){
    my_multiset<int> l7{1,1,2,2,2,6,6};
    //删除迭代器所指位置节点
    auto it=l7.begin();
    l7.erase(it);
    it=l7.begin();
    EXPECT_EQ(l7.size(),6);
    EXPECT_EQ(*it,1);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,2);++it;
    EXPECT_EQ(*it,6);++it;
    EXPECT_EQ(*it,6);++it;
    EXPECT_EQ(it,l7.end());
    //删除容器中值为val的节点
    l7.erase(2);
    it=l7.begin();
    EXPECT_EQ(l7.size(),3);
    EXPECT_EQ(*it,1);++it;
    EXPECT_EQ(*it,6);++it;
    EXPECT_EQ(*it,6);++it;
    EXPECT_EQ(it,l7.end());
    //删除range中迭代器所指节点
    it=l7.begin();++it;++it;
    l7.erase(l7.begin(),it);
    it=l7.begin();
    EXPECT_EQ(l7.size(),1);
    EXPECT_EQ(*it,6);
}
TEST(MultiSetTest, ClearTest){
    my_multiset<int> l7{1,2,2,4,4,6};
    l7.clear();
    EXPECT_EQ(l7.size(),0);
}
TEST(MultiSetTest, SwapTest){
    my_multiset<int> oth{10,10,11};
    my_multiset<int> l7{1,1,2,2,5};
    l7.swap(oth);
    EXPECT_EQ(*l7.begin(),10);
    EXPECT_EQ(*(--oth.end()),1);
}
TEST(MultiSetTest, CountTest){
    my_multiset<int> l7{1,1,2,2,5};
    EXPECT_EQ(2,l7.count(1));
    EXPECT_EQ(1,l7.count(5));
    EXPECT_EQ(0,l7.count(10));
}

#endif
